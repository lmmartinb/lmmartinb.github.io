<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on lmmartinb.dev</title><link>https://lmmartinb.dev/en/posts/</link><description>Recent content in Posts on lmmartinb.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>info@lmmartinb.dev (Luis Miguel Martín)</managingEditor><webMaster>info@lmmartinb.dev (Luis Miguel Martín)</webMaster><copyright>2023 - lmmartinb.dev - All rights reserved</copyright><lastBuildDate>Sat, 08 Jul 2023 20:34:33 +0200</lastBuildDate><atom:link href="https://lmmartinb.dev/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Multi-Tenant with Symfony and Doctrine using Wrapper Class: Step-by-Step Guide</title><link>https://lmmartinb.dev/en/posts/symfony/doctrine/multi-tenant/</link><pubDate>Sat, 08 Jul 2023 20:34:33 +0200</pubDate><author>info@lmmartinb.dev (Luis Miguel Martín)</author><guid>https://lmmartinb.dev/en/posts/symfony/doctrine/multi-tenant/</guid><description>Introduction In this article, we will explore how to implement the multi-tenant architecture using Symfony and Doctrine.
What is multi-tenant? The term multi-tenant refers to an architecture in which an application can serve information to different users, keeping each user&amp;rsquo;s data completely isolated and accessible only to them. This architecture presents several advantages, such as lower cost by serving multiple clients with a single instance, greater ease of maintenance by consistently fixing bugs across all clients, and greater security by keeping each client&amp;rsquo;s data separated in individual databases.</description></item><item><title>SOLID Principles: An Introduction to Object-Oriented Programming Principles</title><link>https://lmmartinb.dev/en/posts/solid-principles/</link><pubDate>Thu, 22 Jun 2023 12:59:14 +0200</pubDate><author>info@lmmartinb.dev (Luis Miguel Martín)</author><guid>https://lmmartinb.dev/en/posts/solid-principles/</guid><description>Introduction In this article, we will explore the SOLID principles, fundamental in the world of object-oriented programming.
Object-oriented programming gives us the ability to encapsulate the logic of entities, facilitating code reuse in different parts of our software.
However, as our projects grow and pass through different programmers, the lack of a solid structure can cause problems. To minimize these situations, Robert C. Martin introduced the acronym SOLID, which represents five basic principles of object-oriented programming.</description></item></channel></rss>