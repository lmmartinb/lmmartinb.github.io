<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on lmmartinb.dev</title><link>https://lmmartinb.dev/tags/php/</link><description>Recent content in php on lmmartinb.dev</description><generator>Hugo -- gohugo.io</generator><language>es</language><managingEditor>info@lmmartinb.dev (Luis Miguel Martín)</managingEditor><webMaster>info@lmmartinb.dev (Luis Miguel Martín)</webMaster><copyright>2023 - lmmartinb.dev - All rights reserved</copyright><lastBuildDate>Fri, 24 Nov 2023 08:00:00 +0200</lastBuildDate><atom:link href="https://lmmartinb.dev/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>PHP 8.3: Descubre las novedades</title><link>https://lmmartinb.dev/posts/php/php-8.3/</link><pubDate>Fri, 24 Nov 2023 08:00:00 +0200</pubDate><author>info@lmmartinb.dev (Luis Miguel Martín)</author><guid>https://lmmartinb.dev/posts/php/php-8.3/</guid><description>Introducción a PHP 8.3 La última versión de PHP, la 8.3, ha sido lanzada recientemente, y trae consigo una serie de características y mejoras significativas. En este artículo, exploraremos en detalle las novedades más relevantes de PHP 8.3.
Novedades destacadas de PHP 8.3 Tipado en constantes A partir de ahora podemos definir constantes de clase con su tipo de dato. Por ejemplo:
Antes:
class Foo { public const FOO = 1; } class Bar extends Foo { public const FOO = &amp;#39;foo&amp;#39;; } Ahora:</description></item><item><title>Implementación de Multi-Tenant con Symfony y Doctrine mediante Wrapper Class: Guía Paso a Paso</title><link>https://lmmartinb.dev/posts/symfony/doctrine/multi-tenant/</link><pubDate>Sat, 08 Jul 2023 20:34:33 +0200</pubDate><author>info@lmmartinb.dev (Luis Miguel Martín)</author><guid>https://lmmartinb.dev/posts/symfony/doctrine/multi-tenant/</guid><description>Introducción En este artículo, exploraremos cómo implementar la arquitectura multi-tenant utilizando Symfony y Doctrine.
¿Qué es el multi-tenant? El término multi-tenant se refiere a una arquitectura en la que una aplicación puede servir información a diferentes usuarios, manteniendo los datos de cada usuario completamente aislados y accesibles solo para ellos. Esta arquitectura presenta varias ventajas, como un menor costo al atender a varios clientes con una sola instancia, una mayor facilidad de mantenimiento al solucionar errores de manera consistente en todos los clientes y una mayor seguridad al mantener los datos de cada cliente separados en bases de datos individuales.</description></item></channel></rss>